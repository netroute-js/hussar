rootProject.name = "hussar"

include "hussar-core"
include "hussar-extensions:hussar-junit5-extension"
include "hussar-applications:hussar-spring-boot-application"
include "hussar-services:hussar-core-service"
include "hussar-services:hussar-wiremock-service"
include "hussar-services:hussar-sql-service"
include "hussar-services:hussar-mongodb-service"
include "hussar-services:hussar-redis-service"
include "hussar-services:hussar-kafka-service"
include "hussar-services:hussar-rabbitmq-service"

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            def springVersion = version("springVersion", "6.1.13")
            def springBootVersion = version("springBoot", "3.3.4")
            def springCloudVersion = version("springCloud", "4.1.3")
            def flywayVersion = version("flyway", "10.7.1")
            def mysqlConnectorVersion = version("mysqlConnector", "8.3.0")
            def mariadbConnectorVersion = version("mariadbConnector", "3.3.2")
            def postgresConnectorVersion = version("postgresConnector", "42.7.1")
            def mongodbConnectorVersion = version("mongodbConnector", "4.11.1")
            def jedisConnectorVersion = version("jedisConnector", "5.1.0")
            def rabbitmqConnectorVersion = version("rabbitmqConnector", "5.21.0")
            def rabbitmqHttpClientVersion = version("rabbitmqHttpClient", "5.2.0")
            def okHttpVersion = version("okHttp", "4.10.0")
            def feignVersion = version("feign", "12.3")
            def fasterXmlVersion = version("fasterXml", "2.17.1")
            def kafkaClientsVersion = version("kafkaClients", "3.7.0")
            def slf4jVersion = version("slf4j", "1.7.36")
            def logbackVersion = version("logback", "1.5.18")
            def testcontainersVersion = version("testcontainers", "1.19.7")
            def wiremockVersion = version("wiremock", "3.3.1")
            def mockitoVersion = version("mockito", "5.14.2")
            def assertjVersion = version("assertj", "3.22.0")
            def javaFakerVersion = version("faker", "2.4.2")
            def junit5Version = version("junit", "5.8.2")
            def junit5PlatformVersion = version("junitPlatform", "1.12.1")

            library("spring-boot-starter", "org.springframework.boot", "spring-boot-starter").versionRef(springBootVersion)
            library("spring-boot-starter-web", "org.springframework.boot", "spring-boot-starter-web").versionRef(springBootVersion)
            library("spring-boot-starter-actuator", "org.springframework.boot", "spring-boot-starter-actuator").versionRef(springBootVersion)
            library("spring-jdbc", "org.springframework", "spring-jdbc").versionRef(springVersion)
            library("spring-cloud-openfeign-core", "org.springframework.cloud", "spring-cloud-openfeign-core").versionRef(springCloudVersion)

            library("flyway-core", "org.flywaydb", "flyway-core").versionRef(flywayVersion)
            library("flyway-mysql", "org.flywaydb", "flyway-mysql").versionRef(flywayVersion)
            library("flyway-postgres", "org.flywaydb", "flyway-database-postgresql").versionRef(flywayVersion)

            library("mysql-connector", "com.mysql", "mysql-connector-j").versionRef(mysqlConnectorVersion)
            library("mariadb-connector", "org.mariadb.jdbc", "mariadb-java-client").versionRef(mariadbConnectorVersion)
            library("postgres-connector", "org.postgresql", "postgresql").versionRef(postgresConnectorVersion)

            library("mongodb-connector", "org.mongodb", "mongodb-driver-sync").versionRef(mongodbConnectorVersion)
            library("jedis-connector", "redis.clients", "jedis").versionRef(jedisConnectorVersion)

            library("rabbitmq-connector", "com.rabbitmq", "amqp-client").versionRef(rabbitmqConnectorVersion)
            library("rabbitmq-http-client", "com.rabbitmq", "http-client").versionRef(rabbitmqHttpClientVersion)

            library("slf4j-api", "org.slf4j", "slf4j-api").versionRef(slf4jVersion)
            library("logback-classic", "ch.qos.logback", "logback-classic").versionRef(logbackVersion)

            library("okhttp", "com.squareup.okhttp3", "okhttp").versionRef(okHttpVersion)
            library("feign-core", "io.github.openfeign", "feign-core").versionRef(feignVersion)

            library("fasterxml", "com.fasterxml.jackson.core", "jackson-databind").versionRef(fasterXmlVersion)

            library("kafka-clients", "org.apache.kafka", "kafka-clients").versionRef(kafkaClientsVersion)

            library("testcontainers", "org.testcontainers", "testcontainers").versionRef(testcontainersVersion)
            library("kafka-testcontainers", "org.testcontainers", "kafka").versionRef(testcontainersVersion)
            library("toxiproxy-testcontainers", "org.testcontainers", "toxiproxy").versionRef(testcontainersVersion)

            library("wiremock", "org.wiremock", "wiremock").versionRef(wiremockVersion)

            library("junit-jupiter", "org.junit.jupiter", "junit-jupiter").versionRef(junit5Version)
            library("junit-platform", "org.junit.platform", "junit-platform-launcher").versionRef(junit5PlatformVersion)
            library("assertj-core", "org.assertj", "assertj-core").versionRef(assertjVersion)
            library("mockito-core", "org.mockito", "mockito-core").versionRef(mockitoVersion)
            library("java-faker", "net.datafaker", "datafaker").versionRef(javaFakerVersion)

            bundle('testing', ['junit-jupiter', 'assertj-core', 'mockito-core', 'java-faker'])
        }
    }
}